CSS: Cascading Style Sheets

Combinators:
    Ways to specify which element needs to be affected from the style.
    Types:
        Adjecent Sibling(+):
            Applies if the second tag is directly adjecent with respect to the first tag.
            eg.
                div + p {
                    color: red;         // This applies red color on <p> tag which is directly followed by the div tag
                }

        General Sibling(~):
            Applies if the second tag occurs after the first tag.
            eg.
                div ~ p {
                    color: red;         // This applies red color on <p> tag which is followed by the div 
                }                          tag, not necessarily adjecent.
                            
        Child(>):
            Applies if the second tag is under the level(2nd level) of the first tag.
            eg.
                div > p {
                    color: red;         // Applies when p is under div, that too just under div(same level)
                }

        Descendant(<space>):
            Applies if the second tag is under the first tag. Level doesn't matter.
    
Selectors:
    Ways to select the elements which need to get styled.
    Types:
        Elements:
            HTML: <h1>
            CSS: h1 { }
        Classes:
            HTML: <h1 class="my-class">
            CSS: .my-class { }
        Universal:
            HTML: <h1><p><button>
            CSS: * { }
        IDs:
            HTML: <h1 id="temp">
            CSS: #temp { }
        Attributes:
            HTML: <button disabled>
            CSS: [disabled] { }
        
Cascading: Multiple rules can apply to the same element.

Specificity:
    Resolve conflicts arising from multiple rules.
    Priority order:
        Inline Styles
             v
        #ID selectors
             v
        .class, pseudo-class and [attribute] selectors
             v
        <Tag> and ::pseudo-element selectors

CSS is Case Insensitive.

Inheritance:
    Styles are applied to the most parent element (body) and are inherited by all the child elements.
    Inheritance have the lowest Specificity.
    To increase the specificity of inheritance, we use the 'inherit' value on a property.
    eg.
        font-family: inherit;

BOX Model:
    CSS interprets every property of an element as a box.

    The body element by default has a margin (depends on browser).
    To alter the body margin, simply add 'margin: 0;' for body selector.

    Margin Collapsing:
        When 2 element are adjecent to each other, their margins merge, the bigger margin is in action by default.

Shorthand Properties:
    Shorthand provides us a short way to alter values for similar type of Properties.
    eg.
        Border: 
            border-style: solid;
            border-color: red;
            border-width: 5px;
        ShortHand:
            border: 5px solid red;
    The shorthand here will give same output as in the seperately defined properties.
    The order of values provided does not matter if there arn't any properties which accepts different type of values.
    But if there are properties which accepts similar type of values, the order do matter.
    eg.
        margin: 5px 10px 5px 10px;      // The order goes as Top Right Bottom Left
        margin: 5px 10px;               // The order goes as Top & Bottom Left & Right
Box Sizing:
    box-sizing: border-box;         // considers padding and border while adjusting height or width
    box-sizing: content-box;        // does not considers padding and border while adjusting height or width
    Recommended: set border-sizing to border-box for every element using *.

'display' Property:
    display property enables us to change the style of the element, i.e. block, inline or both.
    Inline elements are those which are rendered in a single line by default by the browser.
    Block elements are those which are rendered in a block, i.e. in a new line in form of block.
    If we choose to enable both, we can adjust padding border etc as we do in block level elements while the element being an inline one.
    To enable both:
        display: inline-block;

calc():
    This function can be used in css for dimension calculations.
    Adjust dimentions using arithmatic operators.

Pseudo Classes and Pseudo Elements:
    Pseudo Classes: defines the style of a special state of an element. Used via ':'. eg. hover, active, etc.
    Pseudo Element: defines the style of a specific part of an element. Used via '::'. eg. after, before, first-letter, etc.

    Pseudo Element '::after':
        We add a special property named 'content' for the after pseudo element.
        'content' allows us to add the content specified as its value to every element with the 'after' or 'before' pseudo element.

Add same properties to more than one elements:
    We can assign same set of properties to multiple elements as following:
        a, h1 { }       or      a:hover,a:active { }

url():
    This function is used to specify a path for an image for example.

Combine Selectors:
    We can combine selectors for styling a specific element.
    eg.
        a.active { }        // This will target the a tags with class active
        a#anchorID          // This will target the a tag with id 'anchorID'

!important:
    This keyword is used to overwrite the specificity order, forcing the property to be applied no matter what the specificity.
    eg.
        color: red !important;
    This shouldn't be used as it will disrupt the order of specificity.

:not():
    'not' pseodo class is used to exclude the elements which have the property specified to the not and target rest.
    eg.
        :not(.active) { }       // This will exclude all elements which have class active.
        a:not(.active) { }      // This will exclude all the a tags which have class active.

box-shadow:
    This property is used to add a shadow around an element.
    eg.
        box-shadow: 2px 2px 2px 2px red;
        This will set the shadow around the box for 2px.

rgb():
    This is a function which is used to set color in rgb format.
    eg.
        rgb(255, 255, 255)      // This refers to color white
    This function also has a subling: rgba().
    rgba() is used to specify transparency as well.
    eg.
        rgba(0,0,0,0.8)         // This refers to black with alpha(transparency) value of 0.8 (1~Opaque, 0~Transparent).

'clear: both': 
    It is a property which clears float values.

