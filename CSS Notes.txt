CSS: Cascading Style Sheets

Combinators:
    Ways to specify which element needs to be affected from the style.
    Types:
        Adjecent Sibling(+):
            Applies if the second tag is directly adjecent with respect to the first tag.
            eg.
                div + p {
                    color: red;         // This applies red color on <p> tag which is directly followed by the div tag
                }

        General Sibling(~):
            Applies if the second tag occurs after the first tag.
            eg.
                div ~ p {
                    color: red;         // This applies red color on <p> tag which is followed by the div 
                }                          tag, not necessarily adjecent.
                            
        Child(>):
            Applies if the second tag is under the level(2nd level) of the first tag.
            eg.
                div > p {
                    color: red;         // Applies when p is under div, that too just under div(same level)
                }

        Descendant(<space>):
            Applies if the second tag is under the first tag. Level doesn't matter.
    
Selectors:
    Ways to select the elements which need to get styled.
    Types:
        Elements:
            HTML: <h1>
            CSS: h1 { }
        Classes:
            HTML: <h1 class="my-class">
            CSS: .my-class { }
        Universal:
            HTML: <h1><p><button>
            CSS: * { }
        IDs:
            HTML: <h1 id="temp">
            CSS: #temp { }
        Attributes:
            HTML: <button disabled>
            CSS: [disabled] { }
        
Cascading: Multiple rules can apply to the same element.

Specificity:
    Resolve conflicts arising from multiple rules.
    Priority order:
        Inline Styles
             v
        #ID selectors
             v
        .class, pseudo-class and [attribute] selectors
             v
        <Tag> and ::pseudo-element selectors

CSS is Case Insensitive.

Inheritance:
    Styles are applied to the most parent element (body) and are inherited by all the child elements.
    Inheritance have the lowest Specificity.
    To increase the specificity of inheritance, we use the 'inherit' value on a property.
    eg.
        font-family: inherit;

BOX Model:
    CSS interprets every property of an element as a box.

    The body element by default has a margin (depends on browser).
    To alter the body margin, simply add 'margin: 0;' for body selector.

    Margin Collapsing:
        When 2 element are adjecent to each other, their margins merge, the bigger margin is in action by default.

Shorthand Properties:
    Shorthand provides us a short way to alter values for similar type of Properties.
    eg.
        Border: 
            border-style: solid;
            border-color: red;
            border-width: 5px;
        ShortHand:
            border: 5px solid red;
    The shorthand here will give same output as in the seperately defined properties.
    The order of values provided does not matter if there arn't any properties which accepts different type of values.
    But if there are properties which accepts similar type of values, the order do matter.
    eg.
        margin: 5px 10px 5px 10px;      // The order goes as Top Right Bottom Left
        margin: 5px 10px;               // The order goes as Top & Bottom Left & Right
Box Sizing:
    box-sizing: border-box;         // considers padding and border while adjusting height or width
    box-sizing: content-box;        // does not considers padding and border while adjusting height or width
    Recommended: set border-sizing to border-box for every element using *.

'display' Property:
    display property enables us to change the style of the element, i.e. block, inline or both.
    Inline elements are those which are rendered in a single line by default by the browser.
    Block elements are those which are rendered in a block, i.e. in a new line in form of block.
    If we choose to enable both, we can adjust padding border etc as we do in block level elements while the element 
            being an inline one.
    To enable both:
        display: inline-block;

calc():
    This function can be used in css for dimension calculations.
    Adjust dimentions using arithmatic operators.

Pseudo Classes and Pseudo Elements:
    Pseudo Classes: defines the style of a special state of an element. Used via ':'. eg. hover, active, etc.
    Pseudo Element: defines the style of a specific part of an element. Used via '::'. eg. after, before, first-letter, 
            etc.

    Pseudo Element '::after':
        We add a special property named 'content' for the after pseudo element.
        'content' allows us to add the content specified as its value to every element with the 'after' or 'before' 
                pseudo element.

Add same properties to more than one elements:
    We can assign same set of properties to multiple elements as following:
        a, h1 { }       or      a:hover,a:active { }

url():
    This function is used to specify a path for an image for example.

Combine Selectors:
    We can combine selectors for styling a specific element.
    eg.
        a.active { }        // This will target the a tags with class active
        a#anchorID          // This will target the a tag with id 'anchorID'

!important:
    This keyword is used to overwrite the specificity order, forcing the property to be applied no matter what the 
            specificity.
    eg.
        color: red !important;
    This shouldn't be used as it will disrupt the order of specificity.

:not():
    'not' pseodo class is used to exclude the elements which have the property specified to the not and target rest.
    eg.
        :not(.active) { }       // This will exclude all elements which have class active.
        a:not(.active) { }      // This will exclude all the a tags which have class active.

box-shadow:
    This property is used to add a shadow around an element.
    eg.
        box-shadow: 2px 2px 2px 2px red;
        This will set the shadow around the box for 2px.

rgb():
    This is a function which is used to set color in rgb format.
    eg.
        rgb(255, 255, 255)      // This refers to color white
    This function also has a subling: rgba().
    rgba() is used to specify transparency as well.
    eg.
        rgba(0,0,0,0.8)         // This refers to black with alpha(transparency) value of 0.8 (1~Opaque, 0~Transparent).

'clear: both': 
    It is a property which clears float values.

# Positioning of the elements:

'position' property:
    It is a property that is used to change the positioning characteristics of an element.
    It has the following values:
        static (default)
        absolute
        relative
        fixed
        sticky (new)
    'fixed':
        'fixed' does the following things:
            Takes the element out of the document flow.
            Convert the element to inline-block.
            Fixes the position of the element with respect to the viewport (Browser Screen).
            To setup a Navbar using 'fixed':
                marign: 0;
                top: 0;
                left: 0;
                width: 100%;
                box-sizing: border-box;
    'absolute':
        It is similar to fixed with a difference:
            It fixes the position with respect to the previous ancestor which have the position property applied.
    'relative':
        It changes the behavior of the element to change its position with reference of its original position.
        To prevent the child element being displayed outside of the parent element due to faulty dimentioning:
            overflow: hidden;
        We can use overflow property on parent to make sure the element is only displayed inside the parent.
        To use overflow on body element, we need to apply the overflow property on body as well as html selector, 
                due to default behavior of CSS.
    'sticky':
        It is a combination of 'fixed' and 'relative'.
        Its top is positioned with respect to the view port.
        It ends its fixed property when the page is scrolled below its parent element.
        

Properties to change the position of the elements:
    There are properties that are used to specify the exact position of the element with respect to the position 
            property used on the element:
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;

'z-index' property:
    This property is used to change the position of an element with respect to the z-axix.
    By default, each element has a 'z-index' value set as 'auto' or '0'.
    For eg:
        z-index: -1;
        This will move the element behind all the elements by 1 level.
    Stacking Context of z-index:
        The z-index of an element is applied with respect to the z-index of the parent element.
        If the z-index of a child element is higher than the z-index of another parent element, it will have no effect
                as the z-index of the parent of the child is less than the z-index of the other parent.

# Backgrounds

'background' property:
    It is a shortend used to access the various modifications related to background.

'background-color' property:
    It is used to set the background color.

'background-image' property:
    It is used to set a background image.
    If 'background-color' and 'background-image' both are applied simulteneously, irrespective of what comes first,
            background-image always dominates over background-color.

'background-size' property:
    It is used to set the size of the background image.
    Eg:
        background-size: 100%;          // sets the size of image to occupy the whole container
        background-size: 100% 50%;      // sets the width to 100% and height to 50%
    It also have several predifined values.
    Eg:
        background-size: cover;         // it makes sure to fill the complete space of the container with the image
        background-size: contain;       // ensures the image is completely inside the container, irrespective of 
                                                whether it covers the container or not

'background-repeat' property:
    By default, if the image size specified is much smaller than the area available inside the container, the image
            is repeated by default, both on x and y axix.
    This property takes several values:
        background-repeat: no-repeat;       // this stops image repeatition
        background-repeat: repeat-x;        // this repeats the image along x-axix
        background-repeat: repeat-y;        // this repeats the image along y-axix

'background-position' property:
    It is used to define the position of the image inside the container.
    It can be used in several ways.
    Eg:
        background-position: 10px;                  // pushes the image away from the left by 10px
        background-position: 10px 10px;             // pushes the image away from the left and from top by 10px
        background-position: [x-axis] [y-axix];     // shows that 1st and 2nd value is for x and y axis respectively
        background-position: 10% 20%;               // specifies that image will be cropped by 10% from the left and
                                                            by 20% from the top
        background-position: left bottom;           // stick the edge of the image on left and bottom of the container
        background-position: left top;              // same but top instead of bottom
        background-position: left 10% bottom 20%    // specifies that image will be cropped by 10% from the left and
                                                            by 20% from the bottom

'background-origin' property:
    It specifies the coverage area for the background image with respect to the container.
    For eg:
        background-origin: content-box;     // will display image inside the border and padding of the container
        background-origin: padding-box;     // will display image across the padding area
        background-origin: border-box;      // will display the image across the container including container borders

'background-clip' property:
    It specifies the area with respect to the container from where the image will be clipped.
    For eg:
        background-clip: content-box;     // clips the image down to the content area, inside the padding
        background-clip: padding-box;     // clips the image down to include the padding area
        background-clip: border-box;      // clips the image down to include the margin area
    This properties overwrites the background-origin property.

'background-attachment' property:
    It is used to set the scroll behavior of the background image with respect to the page and other elements.
    For eg:
        background-attachment: fixed;       // this fixes the image with respect to the viewport of the web browser
        background-attachment: scroll;      // this fixes the image with respect to the container of the image
        background-attachment: local;       // this sets the image to be scrolled with other items on the page

ShortHand to use all the properties:
    'background' can be used to apply all the properties together.
    Syntax:
        background: [color / image / gradient] [position]/[size] [repeat] [origin] [clip]
        The sequence is as above.

# Images

Backgrounds give us more versitility to format them, but we can also format our images.
An image should have a surrounding container. Classes should be assigned to the container and the image itself.
By default, when the size of the image is specified in % on the img class, it sets the size of the image with respect
        to the dimentions of the image.
The container surrounded by the image should be converted to a inline-block element so that the size assigned in %
        to the image should be reflected on the webpage.
Eg:
    .container-class {
        display: inline-block;
        width: 70%;
        vertical-align: middle;
        box-shadow: 3px 3px 5px 3px rgba(0, 0, 0, 0.3);
    }
    .img-class {
        width: 100%             // 100% of the container
    }
    
    The image will respect the size specified to its container if the display is set to inline-block.
    4th size value of the box-shadow applied on the container is known as 'spread'. It indicates by how much the 
            shadow is to extend outside of the margins of the container.

# Gradients

Gradients can be applied as a background image.

'linear-gradient()' function:
    This function is assigned to the 'background-image' property.
    It allows us to set linear gradients.
    Syntax:
        background-image: linear-gradient([direction], color1, color2, color3, and so on...);
        The direction argument is optional. We can start by specifying the colors for the gradient.
        By default, gradient will be directioned from top to the bottom in the sequence of the specified colors.
        Each color is equally displayed in the gradient by default.
        Direction can be set in different ways:
            to bottom: direction from top to bottom
            to left bottom: will align gradient diagonally which will finish on the left bottom corner
            0deg: direction specified in degrees. By default, angle starts from the bottom.
            30deg: will shift to 30deg clockwise from the bottom.
    Eg:
        background-image: linear-gradient(red 70%, blue 80%);
        The percentage values after the color specifies the finishing length of the color in the gradient with
                respect to the container of the gradient.

'radial-gradient' function:
    This is also assigned to the 'background-image' property.
    Eg:
        background-image: radial-gradient([shape] [size] at [position], color1 [length%], ...)
        
        The first argument can be omited.
        [shape]:
            By default, radial-gradient provides elliptical shape.
            There are only 2 values to the shape:
                ellipse
                circle
        [size]:
            This helps us to set the size for the shape of the gradient.
            Size can be specified in pixels or in percentage or in any dimentions available.
            There are several default keywords available to specify the shape:
                farther-side        // strech the 2nd last color specified to the other side of the container
                closest-side        // starts the gradient from the left side of the container
                farthest-corner     // ensures the outermost ring touches the closest corners
                closest-corner      //  ensures the outermost ring touches the farthest corners
        [position]:
            It is specified in terms of x and y axis positions of the gradient.
        [length%]:
            Length covered by the color ring

# Background Stacking

We can use multiple type of backgrounds or multiple backgrounds.
This can be done using the shorthand for background properties, 'background'.
Eg:
    background: linear-gradient(), url(), color;
    'Top to Bottom' will go from 'Left to Right'.
    linear-gradient will be on top, than url, than color.
We can set only one solid color, and multiple images as background.

# Filters

'filter' is a property which can be applied on an image.
It is an overlay and by default provide several default keywords which we can use to achieve several functionality.

# Sizes and Units

Rules for 'percentage' sizing:
    If an element has position: fixed applied, than the % sizing will be with reference to the viewport.
    If an element has position: absolute applied, than the % sizing will be with reference to the (content+padding)
            area of the last ancestor which has the position: relative/absolute/fixed/sticky applied.
    If an element has position: static/relative applied, than the % sizing will be with reference to the content area
            of the last block level ancestor.

'max-width':
    Used to set maximum width to the element.

'min-width':
    Used to set minimum width to the element.

Font Sizing:
    Specifying the size of fonts in units such as px will have on change on the font size when we change the browser
            settings for the font.
    To make the font size dynamic, i.e. respect the browser settings too, there are some special units available for
            this purpose:
        'em'
        'rem'
        Browser sets a default size for the fonts. These units take the browser default font size and multiply it
                with the value specified with the unit 'em' or 'rem'.
        Behavior of 'em':
            em inherits the font size of its parent elements and scales its size with its own value.
        The only difference between 'rem' and 'em' is that 'rem' does not inherit any font size from its parent elements.
        It only obeys the current value which gets multiplied with the browser defaults.
